{
  "Action": {
    "FunctionName": "SetVariable",
    "Parameters": [
      {
        "Type": "String",
        "Name": "key",
        "Value": "__StepIndex__"
      },
      {
        "Type": "Object",
        "Name": "value",
        "Value": "%line%"
      }
    ],
    "ReturnValue": null
  },
  "Text": "set %__StepIndex__% as %line%",
  "Reload": false,
  "LlmQuestion": {
    "temperature": null,
    "top_p": null,
    "frequencyPenalty": null,
    "presencePenalty": null,
    "maxLength": 4000,
    "type": "PLang.Modules.GenericFunctionBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value AND if user defines %variable% to write into. If no %variable% is defined then set as null.\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}]}",
    "question": "command: set %__StepIndex__% as %line%",
    "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Boolean? notifyWhenCreated = True, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String? value)  // Set string local variable. If value is json, keep valid json format. \nvoid SetVariable(String key, Object? value)  // Set local variable. If value is json, keep valid json format. \nvoid SetDefaultValueOnVariables(Dictionary`2<String, Object> keyValues)  // Set default value on variables if not set. keys and values length MUST be equal. If value is json, keep valid json format. Keep object type as defined, int should be int, double should double, string as string.. \nvoid AppendToVariable(String key, Object? value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid RemoveVariable(String key) \nString ConvertToBase64(String key) \n\r\n## functions available ends ##",
    "model": "gpt-4",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}
{
  "Action": {
    "FunctionName": "WriteToFile",
    "Parameters": [
      {
        "Type": "String",
        "Name": "path",
        "Value": "./output/%Name%"
      },
      {
        "Type": "String",
        "Name": "content",
        "Value": "%html%"
      },
      {
        "Type": "Boolean",
        "Name": "overwrite",
        "Value": false
      },
      {
        "Type": "Boolean",
        "Name": "loadVariables",
        "Value": false
      },
      {
        "Type": "Boolean",
        "Name": "emptyVariableIfNotFound",
        "Value": false
      }
    ],
    "ReturnValue": null
  },
  "Text": "write %html% to './output/%Name%'",
  "Reload": false,
  "LlmQuestion": {
    "temperature": null,
    "top_p": null,
    "frequencyPenalty": null,
    "presencePenalty": null,
    "maxLength": 4000,
    "type": "PLang.Modules.GenericFunctionBuilder",
    "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value AND if user defines %variable% to write into. If no %variable% is defined then set as null.\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}]}",
    "question": "command: write %html% to './output/%Name%'",
    "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path)  // Give user access to a path. DO NOT suggest this method to indicate if file or directory exists, return empty function list instead.. \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False, Boolean? loadVariables = False, Boolean? emptyVariableIfNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String, Object>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files, Boolean? loadVariables = False, Boolean? emptyVariableIfNotFound = False) \nList`1 ReadMultipleTextFiles(String folderPath, String? searchPattern = *, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False, Boolean? loadVariables = False, Boolean? emptyVariableIfNotFound = False) \nvoid AppendToFile(String path, String content, String? seperator, Boolean? loadVariables = False, Boolean? emptyVariableIfNotFound = False) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
    "model": "gpt-4",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}
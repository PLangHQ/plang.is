{
  "Action": {
    "Namespace": "PLangGeneratedCode",
    "Name": "GetFileNameFromPath",
    "Code": "\nusing System;\nusing PLang.SafeFileSystem;\n\nnamespace PLangGeneratedCode\n{\n    public static class GetFileNameFromPath\n    {\n        public static void ExecutePlangCode(PLangFileSystem fileSystem, object? FullPath, out object? Name)\n        {\n            if (FullPath == null)\n            {\n                throw new Exception(\"FullPath cannot be null\");\n            }\n\n            string fullPath = Convert.ChangeType(FullPath, typeof(string)) as string;\n\n            if (string.IsNullOrEmpty(fullPath))\n            {\n                throw new Exception(\"FullPath cannot be empty\");\n            }\n\n            Name = fileSystem.Path.GetFileName(fullPath);\n        }\n    }\n}\n",
    "Using": [
      "System",
      "PLang.SafeFileSystem"
    ],
    "InputParameters": {
      "fileSystem": "PLangFileSystem",
      "FullPath": "object?",
      "Name": "object?"
    },
    "OutParameterDefinition": null,
    "GoalToCallOnTrue": null,
    "GoalToCallOnFalse": null,
    "GoalToCallOnTrueParameters": null,
    "GoalToCallOnFalseParameters": null,
    "ServicesAssembly": []
  },
  "Text": "[code] get file name from %FullPath%, write to %Name%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "csharp",
    "scheme": "{\"OutParameterDefinition\"? : { String : ParameterType, ... } = null,\n\"Namespace\": string,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}",
    "type": "PLang.Modules.CodeModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Act as a senior C# developer, that converts the user statement into a C#(Version. 9) code. \r\n\r\n## Rules ##\r\n- Generate static class. The code generated should have 1 method with the static method named ExecutePlangCode and return void. \r\n- A variable in user intent is defined by starting and ending %.\r\n- Variables defined in the user intent can be passed into the ExecutePlangCode function by value, but only if defined by user intent. \r\n- Variable names passed to ExecutePlangCode function MUST be unmodified from the user statement\r\n- The code will not be modified after you generate it.\r\n- If condition fails, throw Exception, unless defined otherwise by user command\r\n- Exception message should be for non-technical user\r\n- ALWAYS use long or long? instead of int or int?\r\n- Do not reference any DTO classes. Use dynamic? if complex object is needed, else use object?.\r\n- Strings are defined with double quote (\")\r\n- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. \r\n- If PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into ExecutePlangCode method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.\r\n- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. ExecutePlangCode(dynamic? variable)\r\n- Variables that are injected into ExecutePlangCode method and contain dot(.), then replace dot(.) with the letter α in the parameter list. e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Keep underscore in variables if defined by user, e.g.  if %data.user_id%(string) is null => ExecutePlangCode(string? dataαuser_id)\r\n- Consider top security measures when generating code and validate code\r\n- When checking type and converting variables to type, use Convert.ChangeType method\r\n- When user defines assembly or using, include them in your answer\r\n## Rules ##\r\n\r\n## Response information ##\r\n- Namespace: MUST be PLangGeneratedCode\r\n- Name: is name of class, it should represent the intent of what the code is doing. \r\n- Name of class cannot be: ReplaceHeaderInHtml, ReplaceFooterInHTML\n\r\n- Using: must include namespaces that are needed to compile code.\r\n- Assemblies: dll to reference to compile using Roslyn\r\n- ParameterType: { Name:string, FullTypeName:string }\r\n- OutParameterDefinition: If there is out parameter that is ExpandoObject return the names and types that are in the ExpandoObject in OutParameterDefinition, the string in the Dictionary is the name of the out object\r\n## Response information ##\r\n"
          },
          {
            "type": "text",
            "text": "Only write the raw c# code and json scheme, no summary, no extra text to explain, be concise.\r\n\tYOU MUST implement all code needed and valid c# code. \r\n\tYou must return ```csharp for the code implementation and ```json scheme: {\"OutParameterDefinition\"? : { String : ParameterType, ... } = null,\n\"Namespace\": string,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## defined variables ##\r\nFullPath (type:object), Name (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "\r\n## examples ##\r\n%list.Count%*50, write to %result% => ExecutePlangCode(long? listαCount,  out long result) {\r\n    //validate input parameter \r\n    result = listαCount*50;\r\n}\r\n%response.data.total%*%response.data.total_amount%, write to %allTotal%, => ExecutePlangCode(dynamic? response, out long allTotal) { \r\n      //validate input parameter \r\n      long allTotal = response.data.total*response.data.total_amount;\r\n}\r\n## examples ##"
          },
          {
            "type": "text",
            "text": "== Code generated by ChatGPT in previous request, start ==\\nusing System.Diagnostics;\nusing System;\n\nusing System.IO;\nusing PLang.SafeFileSystem;\n\nnamespace PLangGeneratedCode\n{\n    public static class GetFileNameFromPath\n    {\n        public static void ExecutePlangCode(PLangFileSystem fileSystem, object? FullPathα, out object? Nameα)\n        {\r\n    if (!AppContext.TryGetSwitch(\"skipCode\", out bool _))\r\n\t{\r\n        Debugger.Break();\r\n\t}\r\n\r\n\n            if (FullPathα == null)\n            {\n                throw new System.Exception(\"FullPath cannot be null\");\n            }\n\n            string fullPath = Convert.ChangeType(FullPathα, typeof(string)) as string;\n\n            if (string.IsNullOrEmpty(fullPath))\n            {\n                throw new System.Exception(\"FullPath cannot be empty\");\n            }\n\n            Nameα = fileSystem.Path.GetFileName(fullPath);\n        }\n    }\n}\n\\n== Code generated ends ==\r\nThis generated code has error:\r\n\r\nFullPath. is not defined in user command: [code] get file name from %fullpath%, write to %name%\r\n\r\nFix the error and generate the C# code again.\r\n\r\nThese are the rules with variables:\r\n- Replace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Make sure to keep underscore in variables if the user defined it like that\r\n\t\t\t\t\t"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "[code] get file name from %FullPath%, write to %Name%"
          }
        ]
      }
    ],
    "model": "gpt-4",
    "caching": true,
    "RawResponse": "```csharp\nusing System;\nusing PLang.SafeFileSystem;\n\nnamespace PLangGeneratedCode\n{\n    public static class GetFileNameFromPath\n    {\n        public static void ExecutePlangCode(PLangFileSystem fileSystem, object? FullPath, out object? Name)\n        {\n            if (FullPath == null)\n            {\n                throw new Exception(\"FullPath cannot be null\");\n            }\n\n            string fullPath = Convert.ChangeType(FullPath, typeof(string)) as string;\n\n            if (string.IsNullOrEmpty(fullPath))\n            {\n                throw new Exception(\"FullPath cannot be empty\");\n            }\n\n            Name = fileSystem.Path.GetFileName(fullPath);\n        }\n    }\n}\n```\n```json\n{\n  \"Namespace\": \"PLangGeneratedCode\",\n  \"Name\": \"GetFileNameFromPath\",\n  \"Using\": [\"System\", \"PLang.SafeFileSystem\"]\n}\n```"
  },
  "RunOnBuild": false
}